/*! wScratchPad - v2.1.0 - 2014-04-14 */
(function ($) {
    "use strict";

    function ScratchPad(element, options) {
        this.$el = $(element);
        this.options = options;
        this.init = false;
        this.enabled = true;
        this._generate();
    }

    ScratchPad.prototype = {
        _generate: function () {
            // Check if canvas is supported in the browser
            if (!($.support.canvas)) {
                this.$el.append("Canvas is not supported in this browser.");
                return true;
            }
        
            // Create canvas and context elements
            this.canvas = document.createElement("canvas");
            this.ctx = this.canvas.getContext("2d");
        
            // Check and set the position of the element
            if (this.$el.css("position") === "static") {
                this.$el.css("position", "relative");
            }
        
            // Create img, scratchpad, and layer elements
            this.$img = $('<img src=""/>').attr("crossOrigin", "").css({
                position: "absolute",
                width: "100%",
                height: "100%"
            }).addClass("scratch-img").attr("id", "scratch-img-" + this.$el.attr("id")); // Add class and id to img element
        
            this.$scratchpad = $(this.canvas).css({
                position: "absolute",
                width: "100%",
                height: "100%"
            }).addClass("scratch-pad").attr("id", "scratch-pad-" + this.$el.attr("id")); // Add class and id to scratchpad element
        
            this.$layer = $("<div></div>").css({
                position: "absolute",
                width: "100%",
                height: "100%",
                backgroundColor: "rgba(0, 0, 0, 0.5)", // Adjust opacity as needed
                zIndex: 10 // Set the z-index above the canvas
            }).addClass("scratch-layer").attr("id", "scratch-layer-" + this.$el.attr("id")); // Add class and id to layer element
        
            // Bind mouse events
            var that = this;
            this.$scratchpad.mousedown(function (e) {
                if (that.enabled) {
                    that._scratchFunc(e, "Down");
                }
            }).mousemove(function (e) {
                if (that.enabled) {
                    that._scratchFunc(e, "Move");
                }
            }).mouseup(function (e) {
                if (that.enabled) {
                    that._scratchFunc(e, "Up");
                }
            });
        
            // Set options and append elements
            this._setOptions();
            this.$el.append(this.$img).append(this.$scratchpad).append(this.$layer);
            this.init = true;
            this.reset();
        },
        

        reset: function () {
            var cWidth = Math.ceil(this.$el.innerWidth()),
                cHeight = Math.ceil(this.$el.innerHeight()),
                devicePixelRatio = window.devicePixelRatio || 1;

            this.pixels = cWidth * cHeight;
            this.$scratchpad.attr("width", cWidth).attr("height", cHeight);
            this.canvas.setAttribute("width", cWidth * devicePixelRatio);
            this.canvas.setAttribute("height", cHeight * devicePixelRatio);
            this.ctx.scale(devicePixelRatio, devicePixelRatio);
            this.pixels = cWidth * devicePixelRatio * cHeight * devicePixelRatio;

            this.$img.hide();

            if (this.options.bg) {
                if (this.options.bg.charAt(0) === "#") {
                    this.$el.css("backgroundColor", this.options.bg);
                } else {
                    this.$el.css("backgroundColor", "");
                    this.$img.attr("src", this.options.bg);
                }
            }

            if (this.options.fg) {
                if (this.options.fg.charAt(0) === "#") {
                    this.ctx.fillStyle = this.options.fg;
                    this.ctx.beginPath();
                    this.ctx.rect(0, 0, cWidth, cHeight);
                    this.ctx.fill();
                    this.$img.show();
                } else {
                    var that = this;
                    $("<img>").attr("src", this.options.fg).load(function () {
                        that.ctx.drawImage(this, 0, 0, cWidth, cHeight);
                        that.$img.show();
                    });
                }
            }
        },

        clear: function () {
            this.ctx.clearRect(0, 0, Math.ceil(this.$el.innerWidth()), Math.ceil(this.$el.innerHeight()));
        },

        enable: function (enable) {
            this.enabled = enable === true ? true : false;
        },

        destroy: function () {
            this.$el.children().remove();
            $.removeData(this.$el, "wScratchPad");
        },

        _setOptions: function () {
            var that = this;
            $.each(this.options, function (key, val) {
                that.options[key] = that.$el.attr("data-" + key) || val;
                var setter = "set" + key.charAt(0).toUpperCase() + key.substring(1);
                if (that[setter]) {
                    that[setter](that.options[key]);
                }
            });
        },

        setBg: function () {
            this.reset();
        },

        setFg: function () {
            this.reset();
        },

        setCursor: function (cursor) {
            this.$el.css("cursor", cursor);
        },

        _scratchFunc: function (e, event) {
            e.pageX = Math.floor(e.pageX - this.$el.offset().left);
            e.pageY = Math.floor(e.pageY - this.$el.offset().top);
            this["_scratch" + event](e);
            if (this.options.realtime || event === "Up") {
                if (this.options["scratch" + event]) {
                    this.options["scratch" + event].apply(this, [e, this._scratchPercent()]);
                }
            }
        },

        _scratchPercent: function () {
            var cnt = 0,
                imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
            for (var i = 0, l = imageData.data.length; i < l; i += 4) {
                if (imageData.data[i] === 0 && imageData.data[i + 1] === 0 && imageData.data[i + 2] === 0 && imageData.data[i + 3] === 0) {
                    cnt++;
                }
            }
            return cnt / this.pixels * 100;
        },

        _scratchDown: function (e) {
            this.ctx.globalCompositeOperation = "destination-out";
            this.ctx.lineJoin = "round";
            this.ctx.lineCap = "round";
            this.ctx.strokeStyle = this.options.color;
            this.ctx.lineWidth = this.options.size;
            this.ctx.beginPath();
            this.ctx.arc(e.pageX, e.pageY, this.options.size / 2, 0, 2 * Math.PI, true);
            this.ctx.closePath();
            this.ctx.fill();
            this.ctx.beginPath();
            this.ctx.moveTo(e.pageX, e.pageY);
        },

        _scratchMove: function (e) {
            this.ctx.lineTo(e.pageX, e.pageY);
            this.ctx.stroke();
        },

        _scratchUp: function () {
            this.ctx.closePath();
        }
    };

    $.support.canvas = document.createElement("canvas").getContext;

    $.fn.wScratchPad = function (options) {
        if (typeof options === "string") {
            var args = Array.prototype.slice.call(arguments, 1);
            if (options === "destroy") {
                this.each(function () {
                    var instance = $.data(this, "wScratchPad");
                    if (instance) {
                        instance.destroy();
                        $.removeData(this, "wScratchPad");
                    }
                });
                return this;
            }
            return this.each(function () {
                var instance = $.data(this, "wScratchPad");
                if (instance && $.isFunction(instance[options])) {
                    instance[options].apply(instance, args);
                }
            });
        }
        options = $.extend({}, $.fn.wScratchPad.defaults, options);
        return this.each(function () {
            var instance = $.data(this, "wScratchPad");
            if (!instance) {
                $.data(this, "wScratchPad", new ScratchPad(this, options));
            }
        });
    };

    $.fn.wScratchPad.defaults = {
        size: 5,
        bg: "#cacaca",
        fg: "#6699ff",
        realtime: true,
        scratchDown: null,
        scratchUp: null,
        scratchMove: null,
        cursor: "crosshair"
    };

    $.fn.bindMobileEvents = function () {
        $(this).on("touchstart touchmove touchend touchcancel", function (event) {
            var touches = event.changedTouches || event.originalEvent.targetTouches,
                first = touches[0],
                type = "",
                simulatedEvent = "";

            switch (event.type) {
                case "touchstart":
                    type = "mousedown";
                    break;
                case "touchmove":
                    type = "mousemove";
                    event.preventDefault();
                    break;
                case "touchend":
                    type = "mouseup";
                    break;
                default:
                    return;
            }

            var simulatedEvent = document.createEvent("MouseEvent");
            simulatedEvent.initMouseEvent(type, true, true, window, 1,
                first.screenX, first.screenY,
                first.clientX, first.clientY,
                false, false, false, false, 0, null);

            first.target.dispatchEvent(simulatedEvent);
        });
    };
})(jQuery);
